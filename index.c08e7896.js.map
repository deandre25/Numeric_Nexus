{"mappings":"A,S,E,C,C,C,E,C,A,M,G,E,E,M,A,G,C,E,E,M,A,E,I,I,E,E,E,A,M,G,E,E,I,C,C,E,C,C,C,E,C,O,C,C,S,E,C,E,O,A,S,C,E,G,M,O,C,G,O,E,E,E,I,A,S,C,E,G,A,a,O,Q,A,M,C,C,O,Q,C,E,A,M,C,C,a,C,O,M,I,C,E,E,I,A,S,C,C,C,E,G,G,G,A,U,O,E,O,E,E,K,G,I,E,O,S,C,Q,C,I,C,G,K,C,E,I,G,W,G,E,W,E,C,E,E,W,C,I,A,E,A,Q,G,A,Q,E,O,M,I,C,G,G,A,c,G,2C,I,C,G,O,E,E,K,G,E,I,A,W,M,A,U,wI,G,CCEA,IAQI,EACA,EATE,EAAW,SAAS,aAAa,CAAC,UAClC,EAAQ,SAAS,aAAa,CAAC,SAC/B,EAAc,SAAS,aAAa,CAAC,iBACrC,EAAa,SAAS,aAAa,CAAC,gBACpC,EAAe,SAAS,aAAa,CAAC,kBACtC,EAAQ,SAAS,aAAa,CAAC,eAoBrC,SAAS,IACP,EAAQ,CACN,CAAC,EAAG,EAAG,EAAG,EAAE,CACZ,CAAC,EAAG,EAAG,EAAG,EAAE,CACZ,CAAC,EAAG,EAAG,EAAG,EAAE,CACZ,CAAC,EAAG,EAAG,EAAG,EAAE,CACb,CACD,EAAa,EACb,IA8BA,SAAS,gBAAgB,CAAC,UAAW,EA5BvC,CAEA,SAAS,IACP,OAAa,CACX,IAAM,EAAS,KAAK,KAAK,CAAC,AAhCT,EAgCS,KAAK,MAAM,IAC/B,EAAY,KAAK,KAAK,CAAC,AAjCZ,EAiCY,KAAK,MAAM,IAExC,GAAI,AAA6B,IAA7B,CAAK,CAAC,EAAO,CAAC,EAAU,CAAQ,CAClC,CAAK,CAAC,EAAO,CAAC,EAAU,CAAG,AAAgB,GAAhB,KAAK,MAAM,GAAW,EAAI,EACrD,KACF,CACF,EAEA,AAGF,WACE,IAAK,IAAI,EAAI,EAAG,EA7CG,EA6Ce,IAChC,IAAK,IAAI,EAAI,EAAG,EA9CC,EA8CiB,IAChC,EAAM,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC,EAAE,CAAC,SAAS,CAAG,GACnC,EAAM,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC,EAAE,CAAC,SAAS,CAAC,GAAG,CAAE,cACtC,EAA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","sources":["<anon>","src/scripts/main.js"],"sourcesContent":["\"use strict\";\nfunction _array_like_to_array(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n    return arr2;\n}\nfunction _array_without_holes(arr) {\n    if (Array.isArray(arr)) return _array_like_to_array(arr);\n}\nfunction _iterable_to_array(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\nfunction _non_iterable_spread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _to_consumable_array(arr) {\n    return _array_without_holes(arr) || _iterable_to_array(arr) || _unsupported_iterable_to_array(arr) || _non_iterable_spread();\n}\nfunction _unsupported_iterable_to_array(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _array_like_to_array(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);\n}\nvar btnStart = document.querySelector(\".start\");\nvar cells = document.querySelector(\"tbody\");\nvar loseMessage = document.querySelector(\".message-lose\");\nvar winMessage = document.querySelector(\".message-win\");\nvar startMessage = document.querySelector(\".message-start\");\nvar score = document.querySelector(\".game-score\");\nvar CELLS_IN_ROW = 4;\nvar field;\nvar scoreCount;\nbtnStart.addEventListener(\"click\", function() {\n    if (btnStart.classList.contains(\"start\")) {\n        btnStart.classList.remove(\"start\");\n        btnStart.classList.add(\"restart\");\n        btnStart.textContent = \"Restart\";\n        startMessage.classList.add(\"hidden\");\n        startGame();\n    } else {\n        startGame();\n        loseMessage.classList.add(\"hidden\");\n        winMessage.classList.add(\"hidden\");\n    }\n});\nfunction startGame() {\n    field = [\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ]\n    ];\n    scoreCount = 0;\n    rndCell();\n    keyboardListener();\n}\nfunction rndCell() {\n    while(true){\n        var rowIdx = Math.floor(Math.random() * CELLS_IN_ROW);\n        var columnIdx = Math.floor(Math.random() * CELLS_IN_ROW);\n        if (field[rowIdx][columnIdx] === 0) {\n            field[rowIdx][columnIdx] = Math.random() < 0.9 ? 2 : 4;\n            break;\n        }\n    }\n    renderCells();\n}\nfunction renderCells() {\n    for(var i = 0; i < CELLS_IN_ROW; i++)for(var j = 0; j < CELLS_IN_ROW; j++){\n        cells.rows[i].cells[j].className = \"\";\n        cells.rows[i].cells[j].classList.add(\"field-cell\");\n        cells.rows[i].cells[j].classList.add(\"field-cell--\".concat(field[i][j]));\n        cells.rows[i].cells[j].textContent = field[i][j] || \"\";\n    }\n}\nfunction keyboardListener() {\n    document.addEventListener(\"keydown\", keyAction);\n}\nfunction keyAction(e) {\n    var compareField = JSON.parse(JSON.stringify(field));\n    switch(e.key){\n        case \"ArrowUp\":\n            ArrowUp();\n            break;\n        case \"ArrowDown\":\n            ArrowDown();\n            break;\n        case \"ArrowRight\":\n            ArrowRight();\n            break;\n        case \"ArrowLeft\":\n            ArrowLeft();\n            break;\n        default:\n            break;\n    }\n    if (hasFieldChanged(compareField)) {\n        rndCell();\n        score.textContent = scoreCount;\n    }\n    if (!haveMoves()) {\n        loseMessage.classList.remove(\"hidden\");\n        document.removeEventListener(\"keydown\", keyAction);\n    }\n    if (isWin()) winMessage.classList.remove(\"hidden\");\n}\nfunction ArrowUp() {\n    for(var i = 0; i < CELLS_IN_ROW; i++){\n        var newRow = [\n            field[0][i],\n            field[1][i],\n            field[2][i],\n            field[3][i]\n        ];\n        if (canMove(newRow)) {\n            newRow = move(newRow);\n            for(var j = 0; j < newRow.length; j++)field[j][i] = newRow[j];\n        }\n    }\n}\nfunction ArrowDown() {\n    for(var i = 0; i < CELLS_IN_ROW; i++){\n        var newRow = [\n            field[0][i],\n            field[1][i],\n            field[2][i],\n            field[3][i]\n        ];\n        if (canMove(_to_consumable_array(newRow).reverse())) {\n            newRow = move(newRow.reverse()).reverse();\n            for(var j = 0; j < newRow.length; j++)field[j][i] = newRow[j];\n        }\n    }\n}\nfunction ArrowLeft() {\n    for(var i = 0; i < CELLS_IN_ROW; i++){\n        var newRow = field[i];\n        if (canMove(newRow)) {\n            newRow = move(field[i]);\n            for(var j = 0; j < newRow.length; j++)field[i][j] = newRow[j];\n        }\n    }\n}\nfunction ArrowRight() {\n    for(var i = 0; i < CELLS_IN_ROW; i++){\n        var newRow = field[i];\n        if (canMove(_to_consumable_array(newRow).reverse())) {\n            newRow = move(newRow.reverse()).reverse();\n            for(var j = 0; j < newRow.length; j++)field[i][j] = newRow[j];\n        }\n    }\n}\nfunction move(row) {\n    var newRow = replaceZeros(row);\n    for(var i = 0; i < newRow.length; i++)if (newRow[i] === newRow[i + 1] && newRow[i] !== 0) {\n        newRow[i] = newRow[i] * 2;\n        newRow[i + 1] = 0;\n        scoreCount += newRow[i];\n    }\n    newRow = replaceZeros(newRow);\n    return newRow;\n}\nfunction canMove(row) {\n    for(var i = 0; i < row.length - 1; i++){\n        var canMerge = row[i] === row[i + 1] && row[i] !== 0;\n        var canSlide = row[i] === 0 && row[i + 1] !== 0;\n        if (canMerge || canSlide) return true;\n    }\n    return false;\n}\nfunction haveMoves() {\n    var haveFreeCells = field.some(function(row) {\n        return row.some(function(cell) {\n            return cell === 0;\n        });\n    });\n    var haveMerges = false;\n    for(var i = 0; i < CELLS_IN_ROW; i++){\n        for(var j = 0; j < CELLS_IN_ROW - 1; j++)if (field[i][j] === field[i][j + 1]) {\n            haveMerges = true;\n            break;\n        }\n    }\n    for(var i1 = 0; i1 < CELLS_IN_ROW - 1; i1++){\n        for(var j1 = 0; j1 < CELLS_IN_ROW; j1++)if (field[i1][j1] === field[i1 + 1][j1]) {\n            haveMerges = true;\n            break;\n        }\n    }\n    return haveFreeCells || haveMerges;\n}\nfunction isWin() {\n    for(var i = 0; i < CELLS_IN_ROW; i++)for(var j = 0; j < CELLS_IN_ROW; j++){\n        if (field[i][j] === 2048) return true;\n    }\n    return false;\n}\nfunction replaceZeros(row) {\n    var newRow = row.filter(function(num) {\n        return num !== 0;\n    });\n    while(newRow.length < CELLS_IN_ROW)newRow.push(0);\n    return newRow;\n}\nfunction hasFieldChanged(compareField) {\n    for(var i = 0; i < CELLS_IN_ROW; i++)for(var j = 0; j < CELLS_IN_ROW; j++){\n        if (compareField[i][j] !== field[i][j]) return true;\n    }\n    return false;\n}\n\n//# sourceMappingURL=index.c08e7896.js.map\n","'use strict';\n\nconst btnStart = document.querySelector('.start');\nconst cells = document.querySelector('tbody');\nconst loseMessage = document.querySelector('.message-lose');\nconst winMessage = document.querySelector('.message-win');\nconst startMessage = document.querySelector('.message-start');\nconst score = document.querySelector('.game-score');\n\nconst CELLS_IN_ROW = 4;\nlet field;\nlet scoreCount;\n\nbtnStart.addEventListener('click', () => {\n  if (btnStart.classList.contains('start')) {\n    btnStart.classList.remove('start');\n    btnStart.classList.add('restart');\n    btnStart.textContent = 'Restart';\n    startMessage.classList.add('hidden');\n    startGame();\n  } else {\n    startGame();\n    loseMessage.classList.add('hidden');\n    winMessage.classList.add('hidden');\n  }\n});\n\nfunction startGame() {\n  field = [\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n  ];\n  scoreCount = 0;\n  rndCell();\n  keyboardListener();\n}\n\nfunction rndCell() {\n  while (true) {\n    const rowIdx = Math.floor(Math.random() * CELLS_IN_ROW);\n    const columnIdx = Math.floor(Math.random() * CELLS_IN_ROW);\n\n    if (field[rowIdx][columnIdx] === 0) {\n      field[rowIdx][columnIdx] = Math.random() < 0.9 ? 2 : 4;\n      break;\n    }\n  }\n\n  renderCells();\n}\n\nfunction renderCells() {\n  for (let i = 0; i < CELLS_IN_ROW; i++) {\n    for (let j = 0; j < CELLS_IN_ROW; j++) {\n      cells.rows[i].cells[j].className = '';\n      cells.rows[i].cells[j].classList.add(`field-cell`);\n      cells.rows[i].cells[j].classList.add(`field-cell--${field[i][j]}`);\n      cells.rows[i].cells[j].textContent = field[i][j] || '';\n    }\n  }\n}\n\nfunction keyboardListener() {\n  document.addEventListener('keydown', keyAction);\n}\n\nfunction keyAction(e) {\n  const compareField = JSON.parse(JSON.stringify(field));\n\n  switch (e.key) {\n    case 'ArrowUp':\n      ArrowUp();\n      break;\n\n    case 'ArrowDown':\n      ArrowDown();\n      break;\n\n    case 'ArrowRight':\n      ArrowRight();\n      break;\n\n    case 'ArrowLeft':\n      ArrowLeft();\n      break;\n\n    default:\n      break;\n  }\n\n  if (hasFieldChanged(compareField)) {\n    rndCell();\n    score.textContent = scoreCount;\n  }\n\n  if (!haveMoves()) {\n    loseMessage.classList.remove('hidden');\n    document.removeEventListener('keydown', keyAction);\n  }\n\n  if (isWin()) {\n    winMessage.classList.remove('hidden');\n  }\n}\n\nfunction ArrowUp() {\n  for (let i = 0; i < CELLS_IN_ROW; i++) {\n    let newRow = [\n      field[0][i],\n      field[1][i],\n      field[2][i],\n      field[3][i],\n    ];\n\n    if (canMove(newRow)) {\n      newRow = move(newRow);\n\n      for (let j = 0; j < newRow.length; j++) {\n        field[j][i] = newRow[j];\n      }\n    }\n  }\n}\n\nfunction ArrowDown() {\n  for (let i = 0; i < CELLS_IN_ROW; i++) {\n    let newRow = [\n      field[0][i],\n      field[1][i],\n      field[2][i],\n      field[3][i],\n    ];\n\n    if (canMove([...newRow].reverse())) {\n      newRow = move(newRow.reverse()).reverse();\n\n      for (let j = 0; j < newRow.length; j++) {\n        field[j][i] = newRow[j];\n      }\n    }\n  }\n}\n\nfunction ArrowLeft() {\n  for (let i = 0; i < CELLS_IN_ROW; i++) {\n    let newRow = field[i];\n\n    if (canMove(newRow)) {\n      newRow = move(field[i]);\n\n      for (let j = 0; j < newRow.length; j++) {\n        field[i][j] = newRow[j];\n      }\n    }\n  }\n}\n\nfunction ArrowRight() {\n  for (let i = 0; i < CELLS_IN_ROW; i++) {\n    let newRow = field[i];\n\n    if (canMove([...newRow].reverse())) {\n      newRow = move(newRow.reverse()).reverse();\n\n      for (let j = 0; j < newRow.length; j++) {\n        field[i][j] = newRow[j];\n      }\n    }\n  }\n}\n\nfunction move(row) {\n  let newRow = replaceZeros(row);\n\n  for (let i = 0; i < newRow.length; i++) {\n    if (newRow[i] === newRow[i + 1] && newRow[i] !== 0) {\n      newRow[i] = newRow[i] * 2;\n      newRow[i + 1] = 0;\n      scoreCount += newRow[i];\n    }\n  }\n\n  newRow = replaceZeros(newRow);\n\n  return newRow;\n}\n\nfunction canMove(row) {\n  for (let i = 0; i < row.length - 1; i++) {\n    const canMerge = (row[i] === row[i + 1]) && (row[i] !== 0);\n    const canSlide = (row[i] === 0) && (row[i + 1] !== 0);\n\n    if (canMerge || canSlide) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction haveMoves() {\n  const haveFreeCells = field.some(row => row.some(cell => cell === 0));\n  let haveMerges = false;\n\n  for (let i = 0; i < CELLS_IN_ROW; i++) {\n    for (let j = 0; j < CELLS_IN_ROW - 1; j++) {\n      if (field[i][j] === field[i][j + 1]) {\n        haveMerges = true;\n        break;\n      }\n    }\n  }\n\n  for (let i = 0; i < CELLS_IN_ROW - 1; i++) {\n    for (let j = 0; j < CELLS_IN_ROW; j++) {\n      if (field[i][j] === field[i + 1][j]) {\n        haveMerges = true;\n        break;\n      }\n    }\n  }\n\n  return haveFreeCells || haveMerges;\n}\n\nfunction isWin() {\n  for (let i = 0; i < CELLS_IN_ROW; i++) {\n    for (let j = 0; j < CELLS_IN_ROW; j++) {\n      if (field[i][j] === 2048) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n}\n\nfunction replaceZeros(row) {\n  const newRow = row.filter(num => num !== 0);\n\n  while (newRow.length < CELLS_IN_ROW) {\n    newRow.push(0);\n  }\n\n  return newRow;\n}\n\nfunction hasFieldChanged(compareField) {\n  for (let i = 0; i < CELLS_IN_ROW; i++) {\n    for (let j = 0; j < CELLS_IN_ROW; j++) {\n      if (compareField[i][j] !== field[i][j]) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n}\n"],"names":["_array_like_to_array","arr","len","length","i","arr2","Array","_to_consumable_array","_array_without_holes","isArray","_iterable_to_array","iter","Symbol","iterator","from","_unsupported_iterable_to_array","o","minLen","n","Object","prototype","toString","call","slice","constructor","name","test","_non_iterable_spread","TypeError","field","scoreCount","btnStart","document","querySelector","cells","loseMessage","winMessage","startMessage","score","startGame","rndCell","addEventListener","keyAction","rowIdx","Math","floor","random","columnIdx","renderCells","j","rows","className","classList","add","concat","textContent","e","compareField","JSON","parse","stringify","key","ArrowUp","newRow","canMove","move","ArrowDown","reverse","ArrowRight","ArrowLeft","hasFieldChanged","haveMoves","haveFreeCells","some","row","cell","haveMerges","CELLS_IN_ROW","i1","j1","remove","removeEventListener","isWin","replaceZeros","canMerge","canSlide","filter","num","push","contains"],"version":3,"file":"index.c08e7896.js.map"}